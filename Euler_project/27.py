# 오일러는 다음과 같은 멋진 이차식을 제시했습니다.

# n**2 + n + 41
# 이 식의 n에다 0부터 39 사이의 수를 넣으면, 그 결과는 모두 소수가 됩니다.
# 하지만 n = 40일 때의 값 40**2 + 40 + 41 은 40×(40 + 1) + 41 이므로 41로 나누어지고, n = 41일 때 역시 41**2 + 41 + 41 이므로 소수가 아닙니다.

# 컴퓨터의 발전에 힘입어 n**2 − 79n + 1601 이라는 엄청난 이차식이 발견되었는데, 이것은 n이 0에서 79 사이일 때 모두 80개의 소수를 만들어냅니다. 이 식의 계수의 곱은 -79 × 1601 = -126479가 됩니다.

# 아래와 같은 모양의 이차식이 있다고 가정했을 때,

# n**2 + an + b   (단 | a | < 1000, | b | < 1000)
# 0부터 시작하는 연속된 n에 대해 가장 많은 소수를 만들어내는 이차식을 찾아서, 그 계수 a와 b의 곱을 구하세요.


import math


def is_prime(n):
    for i in range(2, math.isqrt(n) + 1):
        if n % i == 0:
            return False
    return True


n = 0
for a in range(-1000, 1000):
    for b in range(-1000, 1000):
        eq = n ** 2 + a ** n + b
        if eq > 1 and eq % 2 != 0 and is_prime(eq) == True:
            n += 1
        else:
            print(n, a, b)
            dic = {}
            n = 0
